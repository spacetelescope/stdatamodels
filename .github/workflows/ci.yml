name: CI

on:
  push:
    branches:
      - master
      - '*.x'
    tags:
      - '*'
  pull_request:
  schedule:
    # Weekly Monday 9AM build
    # * is a special character in YAML so you have to quote this string
    - cron: '0 9 * * 1'

jobs:
  style:
    name: Code style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: style-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install pyproject-flake8
      - run: pflake8 --count src
  audit:
    name: Bandit security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: audit-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install bandit
      - run: bandit -r -ll src
  test:
    name: test
    needs: [ style, audit ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: [ 3.8, 3.9, '3.10' ]
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install -e ".[test]" pytest-xdist
      - run: pip freeze
      - run: pytest -n auto
  test_jwst:
    name: jwst.datamodels tests
    needs: [ style, audit ]
    runs-on: ubuntu-latest
    env:
      CRDS_SERVER_URL: https://jwst-crds.stsci.edu
      CRDS_PATH: /home/runner/work/stdatamodels/crds_cache
      CRDS_CLIENT_RETRY_COUNT: 3
      CRDS_CLIENT_RETRY_DELAY_SECONDS: 20
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install -e ".[test]" pytest-xdist
      - run: pip install "jwst[test] @ git+https://github.com/spacetelescope/jwst.git"
      - run: export CRDS_VERSION=$(crds list --contexts jwst_0865.pmap --version)
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-jwst-datamodels-${{ env.CRDS_VERSION }}
      - run: crds sync --contexts jwst_0865.pmap
      - run: pip freeze
      - run: pytest -n auto --pyargs jwst.datamodels
  test_with_coverage:
    name: Coverage
    needs: [ test, test_jwst ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: test-coverage-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install -e ".[test]" pytest-xdist pytest-cov
      - run: pip install "asdf @ git+https://github.com/asdf-format/asdf.git"
      - run: pip freeze
      - run: pytest -n auto --cov-report=xml --cov=src/stdatamodels
      - run: coverage report -m
      - uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
  build-docs:
    name: Build documentation
    needs: [ test, test_jwst ]
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get install graphviz texlive-latex-extra dvipng
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: build-docs-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install -e ".[docs]"
      - run: sphinx-build -W docs/source build/docs

