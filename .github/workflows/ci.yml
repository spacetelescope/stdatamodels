name: CI

on:
  push:
    branches:
      - master
      - '*.x'
    tags:
      - '*'
  pull_request:
  schedule:
    # Weekly Monday 9AM build
    # * is a special character in YAML so you have to quote this string
    - cron: '0 9 * * 1'

env:
  CRDS_SERVER_URL: https://jwst-crds.stsci.edu
  CRDS_PATH: /tmp/crds_cache
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20

jobs:
  test:
    name: ${{ matrix.toxenv }} (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}]
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ test-xdist ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
        os: [ ubuntu-latest, macos-latest ]
        include:
          - toxenv: check-style
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: check-security
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: build-dist
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: test-xdist-cov
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: test-jwst-xdist-cov
            os: ubuntu-latest
            python-version: '3.11'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'
      - if: contains(matrix.toxenv, 'test')
        run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["jwst"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        # Get default CRDS_CONTEXT without installing crds client
        # See https://hst-crds.stsci.edu/static/users_guide/web_services.html#generic-request
        id: crds-context
      - if: contains(matrix.toxenv, 'test')
        uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ steps.crds-context.outputs.pmap }}
      - run: pip install tox
      - run: tox -e ${{ matrix.toxenv }}
      - if: contains(matrix.toxenv, '-cov')
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit
          fail_ci_if_error: true
