extend = "pyproject.toml"

exclude = [
    ".git",
    "__pycache__",
    "docs",
    ".eggs",
    "build",
    "dist",
    ".tox",
    ".eggs",
]
line-length = 130
target-version = "py310"

[format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[lint]
select = [
    "F",      # Pyflakes (part of default flake8)
    "E",      # pycodestyle (part of default flake8)
    "W",      # pycodestyle (part of default flake8)
    #"D",      # docstrings, see also numpydoc pre-commit action
    "N",      # pep8-naming (naming conventions)
    "A",      # flake8-builtins (prevent shadowing of builtins)
    "ARG",    # flake8-unused-arguments (prevent unused arguments)
    "B",      # flake8-bugbear (miscellaneous best practices to avoid bugs)
    "C4",     # flake8-comprehensions (best practices for comprehensions)
    "ICN",    # flake8-import-conventions (enforce import conventions)
    "INP",    # flake8-no-pep420 (prevent use of PEP420, i.e. implicit name spaces)
    "ISC",    # flake8-implicit-str-concat (conventions for concatenating long strings)
    "LOG",    # flake8-logging
    "NPY",    # numpy-specific rules
    "PGH",    # pygrep-hooks (ensure appropriate usage of noqa and type-ignore)
    "PTH",    # flake8-use-pathlib (enforce using Pathlib instead of os)
    "S",      # flake8-bandit (security checks)
    "SLF",    # flake8-self (prevent using private class members outside class)
    "SLOT",   # flake8-slots (require __slots__ for immutable classes)
    "T20",    # flake8-print (prevent print statements in code)
    "TRY",    # tryceratops (best practices for try/except blocks)
    "UP",     # pyupgrade (simplified syntax allowed by newer Python versions)
    "YTT",    # flake8-2020 (prevent some specific gotchas from sys.version)
]
ignore = [
    "D100", # missing docstring in public module
    "E741", # ambiguous variable name (O/0, l/I, etc.)
    "UP008", # use super() instead of super(class, self). no harm being explicit
    "UP015", # unnecessary open(file, "r"). no harm being explicit
    "TRY003", # prevents custom exception messages not defined in exception itself.
    "ISC001", # single line implicit string concatenation. formatter recommends ignoring this.
    # to fix
    "A001",
    "A002",
    "ARG001",
    "ARG002",
    "ARG005",
    "B003",
    "B006",
    "B007",
    "B009",
    "B011",
    "B015",
    "B018",
    "B028",
    "B904",
    "B905",
    "C401",
    "C402",
    "C405",
    "C408",
    "C414",
    "C416",
    "C419",
    "E701",
    "E712",
    "E713",
    "E721",
    "ICN001",
    "INP001",
    "N801",
    "N803",
    "N806",
    "N999",
    "NPY002",
    "PTH101",
    "PTH110",
    "PTH118",
    "PTH119",
    "PTH120",
    "PTH122",
    "PTH123",
    "S101",
    "SLF001",
    "TRY002",
    "TRY004",
    "UP009",
    "UP024",
    "UP028",
    "UP030",
    "UP031",
    "UP032",
    "UP034",
    "UP038",
    "UP039",
]

[lint.pydocstyle]
convention = "numpy"

[lint.flake8-annotations]
ignore-fully-untyped = true  # Turn of annotation checking for fully untyped code

[lint.per-file-ignores]
"**/test_*.py" = ["S101"]
